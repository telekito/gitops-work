name: new Environment Creation
on:
  workflow_dispatch:
    inputs:
      CLIENT_ID:
        description: 'client id'
        required: true
        type: string        
      CLIENT_SECRET:
        description: 'client secret'
        required: true 
        type: string 
      SUBSCRIPTION_ID:
        description: 'SUBSCRIPTION_ID'
        required: true 
        type: string  
      TENANT_ID:
        description: 'tenantId'
        required: true 
        type: string
      clientName:
        description: 'Client Name'
        type: string
        required: true 
      AzureRegion:
        description: 'Azure region'
        required: true
        default: 'northeurope' 
        type: choice
        options:
        - eastus               
        - eastus2              
        - southcentralus       
        - westus2              
        - westus3              
        - australiaeast        
        - southeastasia        
        - northeurope          
        - swedencentral        
        - uksouth              
        - westeurope           
        - centralus            
        - southafricanorth     
        - centralindia         
        - eastasia             
        - japaneast            
        - koreacentral         
        - canadacentral        
        - francecentral        
        - germanywestcentral   
        - norwayeast           
        - switzerlandnorth     
        - uaenorth             
        - brazilsouth          
        - eastus2euap          
        - qatarcentral         
        - centralusstage       
        - eastusstage          
        - eastus2stage         
        - northcentralusstage  
        - southcentralusstage  
        - westusstage          
        - westus2stage         
        - asia                 
        - asiapacific          
        - australia            
        - brazil               
        - canada               
        - europe               
        - france               
        - germany              
        - global               
        - india                
        - japan                
        - korea                
        - norway               
        - singapore            
        - southafrica          
        - switzerland          
        - uae                  
        - uk                   
        - unitedstates         
        - unitedstateseuap     
        - eastasiastage        
        - southeastasiastage   
        - eastusstg            
        - northcentralus       
        - westus               
        - jioindiawest         
        - centraluseuap        
        - westcentralus        
        - southafricawest      
        - australiacentral     
        - australiacentral2    
        - australiasoutheast   
        - japanwest            
        - jioindiacentral      
        - koreasouth           
        - southindia           
        - westindia            
        - canadaeast           
        - francesouth          
        - germanynorth         
        - norwaywest           
        - switzerlandwest      
        - ukwest               
        - uaecentral           
        - brazilsoutheast       

env:
  AZURE_CREDENTIALS_CLIENT: '{"clientId":"${{ inputs.CLIENT_ID }}","clientSecret":"${{ inputs.CLIENT_SECRET }}","subscriptionId":"${{ inputs.SUBSCRIPTION_ID }}","tenantId":"${{ inputs.TENANT_ID }}"}'     

jobs:  
  create-aks:    
    runs-on: ubuntu-latest        
    steps:      
      - uses: Azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS_CLIENT }}
      - name: Create resource group rg-${{ inputs.clientName }}
        uses: azure/CLI@v1
        with:
          azcliversion: 2.44.1
          inlineScript: |
            az group create --name rg-${{ inputs.clientName }} --location ${{ inputs.AzureRegion }}              
      - name: Create aks aks-${{ inputs.clientName }}
        uses: azure/CLI@v1          
        with:            
          azcliversion: 2.44.1
          inlineScript: |              
            az aks create --resource-group rg-${{ inputs.clientName }} \
              --name aks-${{ inputs.clientName }} \
              --node-count 1 \
              --generate-ssh-keys

  create-argocd-cluster: 
    needs: create-aks
    runs-on: ubuntu-latest
    steps:    
      - uses: Azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS_CLIENT }}                
      - name: Login into the AKS
        uses: azure/aks-set-context@v3
        with:
          resource-group: 'rg-${{ inputs.clientName }}'
          cluster-name: 'aks-${{ inputs.clientName }}'
      - name: Setup App ArgoCD CLI 
        uses: azure/CLI@v1
        with:     
          azcliversion: 2.44.1                   
          inlineScript: |              
            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /usr/local/bin/argocd  
            argocd login ${{ vars.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
            argocd cluster add aks-${{ inputs.clientName }} --insecure true -y

  create-argocd-app: 
    needs: create-argocd-cluster
    runs-on: ubuntu-latest
    steps:
      - name: Setup App ArgoCD CLI 
        uses: azure/CLI@v1
        with:     
          azcliversion: 2.44.1                   
          inlineScript: |              
            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /usr/local/bin/argocd  
            argocd login ${{ vars.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure            
            argocd app create app-${{ inputs.clientName }} \
              --repo ${{ vars.GIT_REPOSITORY }} \
              --path cluster/namespaces/demo-app \
              --dest-namespace=demo-app \
              --directory-recurse \
              --sync-option CreateNamespace=true \
              --sync-policy automated \
              --dest-server $(argocd cluster get aks-${{ inputs.clientName }} -o json | jq -r '.server')
  opa-gatekeeper-app: 
    needs: create-argocd-cluster
    runs-on: ubuntu-latest
    steps:
      - name: Setup App ArgoCD CLI 
        run: |             
            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /usr/local/bin/argocd  
            argocd login ${{ vars.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
      - name: Create OPA APP
        run: |  
            argocd app create opa-${{ inputs.clientName }} --repo ${{ vars.GIT_REPOSITORY }} --path cluster/global/gatekeeper-system --dest-namespace=gatekeeper-system --sync-option CreateNamespace=true --sync-policy automated --dest-server $(argocd cluster get aks-${{ inputs.clientName }} -o json | jq -r '.server')
      - name: Create POLICY APP
        run: |              
            argocd app create policies-${{ inputs.clientName }} --repo ${{ vars.GIT_REPOSITORY }} --path cluster/global/policies --directory-recurse --sync-policy automated --dest-server $(argocd cluster get aks-${{ inputs.clientName }} -o json | jq -r '.server')

  configure-prometheus: 
    needs: create-argocd-cluster
    runs-on: ubuntu-latest
    steps:    
      - uses: actions/checkout@master
      - uses: Azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS_CLIENT }}
      - name: Login into the AKS
        uses: azure/aks-set-context@v3
        with:
          resource-group: 'rg-${{ inputs.clientName }}'
          cluster-name: 'aks-${{ inputs.clientName }}'
      - name: Install HELM
        uses: azure/setup-helm@v3
        with:
          version: 'v3.11.0'
      - name: Setup prometheus configuration file
        run: |
          sed -i 's,<CLUSTER-NAME>,aks-${{ inputs.clientName }},g' cluster/namespaces/prometheus/prometheus-config.yaml
          sed -i 's,<INGESTION_URL>,${{ vars.PROMETHEUS_INGESTION_URL }},g' cluster/namespaces/prometheus/prometheus-config.yaml
          sed -i 's,<APP-REGISTRATION-CLIENT-ID>,${{ vars.PROMETHEUS_CLIENT_ID }},g' cluster/namespaces/prometheus/prometheus-config.yaml
          sed -i 's,<TENANT-ID>,${{ vars.TENANT_ID }},g' cluster/namespaces/prometheus/prometheus-config.yaml

      - name: Create the app to manage the secret 
        uses: azure/CLI@v1
        with:     
          azcliversion: 2.44.1                   
          inlineScript: |              
            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /usr/local/bin/argocd  
            argocd login ${{ vars.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
            argocd app create secret-monitoring-${{ inputs.clientName }} \
              --repo ${{ vars.GIT_REPOSITORY }} \
              --path cluster/namespaces/prometheus/secret \
              --dest-namespace=prometheus \
              --directory-recurse \
              --sync-option CreateNamespace=true \
              --sync-policy automated \
              --dest-server $(argocd cluster get aks-${{ inputs.clientName }} -o json | jq -r '.server')
      - name: install prometheus
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus \
            prometheus-community/kube-prometheus-stack \
            --namespace prometheus \
            --create-namespace

      - name: Disable unused metrics
        run: |
          helm upgrade prometheus \
              prometheus-community/kube-prometheus-stack \
              --namespace prometheus \
              --set kubeEtcd.enabled=false \
              --set kubeControllerManager.enabled=false \
              --set kubeScheduler.enabled=false
      - name: Apply configuration
        run: |
          helm upgrade prometheus \
              prometheus-community/kube-prometheus-stack \
              --namespace prometheus \
              -f cluster/namespaces/prometheus/prometheus-config.yaml 